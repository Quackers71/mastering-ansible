## Mastering Ansible
# Servers & IP's 
              IP:
1. dnsmasq  - 192.168.0.40
2. ubuntu-c - 192.168.0.41
3. ubuntu1  - 192.168.0.42
4. ubuntu2  - 192.168.0.43  
5. centos1  - 192.168.0.45
6. centos2  - 192.168.0.46
7. centos3  - 192.168.0.47
8. robq-VirtualBox     - 192.168.0.48

# N.B. because you keep Hibernating the Host you may need to restart the NetworkManager Service using :
sudo systemctl restart NetworkManager.service

# Install ansible on Linux robq-VirtualBox
sudo apt-add-repository ppa:ansible/ansible
sudo apt update
sudo apt install ansible
# other installations can be viewed at : 
https://github.com/Quackers71/ps-h-o-ansible/blob/master/Installation.txt

# Add the .pub key to all the hosts
robq@robq-VirtualBox:~/mastering-ansible/ansible$ for host in /
192.168.0.41 192.168.0.42 192.168.0.43 192.168.0.46 192.168.0.47; do ssh-copy-id ${host}; done

# ansible host commands
ansible all -m ping
ansible centos --list-hosts
ansible ubuntu --list-hosts
ansible all --list-hosts
ansible ~.*3 --list-hosts

# Changing centos1 port to 2222
ssh root@192.168.0.45
vim /etc/ssh/sshd_config
# change to 
Port 2222
# now run
-bash-4.2# semanage port -a -t ssh_port_t -p tcp 2222
-bash: semanage: command not found
-bash-4.2# yum install policycoreutils-python -y

-bash-4.2# semanage port -a -t ssh_port_t -p tcp 2222
ValueError: Port tcp/2222 already defined

-bash-4.2# firewall-cmd --permanent --add-port=2222/tcp
success
-bash-4.2# firewall-cmd --reload
success

-bash-4.2# service sshd restart
Redirecting to /bin/systemctl restart sshd.service

-bash-4.2# ssh 0 -p 2222
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[0]:2222,[0.0.0.0]:2222' (ECDSA) to the list of known hosts.
root@0's password: 
Last login: Sun Jul 14 21:17:31 2019

## Ansible Inventories

https://docs.ansible.com/ansible/2.3/intro_inventory.html

https://docs.ansible.com/ansible/latest/user_guide/vault.html


## Ansible Modules

date
# The 'file' Module
ansible all -m file -a 'path=/tmp/test state=touch'
# Yellow Output = Success but shows 'CHANGED'
ls -altrh /tmp/test
ansible all -m file -a 'path=/tmp/test state=touch'
# Yellow Output
ls -altrh /tmp/test
ansible all -m file -a 'path=/tmp/test state=file mode=600'
# Yellow Output
ansible all -m file -a 'path=/tmp/test state=file mode=600'
# Green Output = Success (no change)


# Idempotency - An operation is Idempotent
# if the result of performing it once is 
# exactly the same as the result of performing
# it repeatedly without any intervening actions.


# The 'copy' Module
touch /tmp/x
ansible all -m copy -a 'src=/tmp/x dest=/tmp/x'
ansible all -m copy -a 'remote_src=yes src=/tmp/x dest=/tmp/y'


# The 'command' Module
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ansible all -m command -a 'hostname' -o
robq-VirtualBox | CHANGED | rc=0 | (stdout) robq-VirtualBox
ubuntu1 | CHANGED | rc=0 | (stdout) ubuntu1
centos1 | CHANGED | rc=0 | (stdout) centos1
centos3 | CHANGED | rc=0 | (stdout) centos3
centos2 | CHANGED | rc=0 | (stdout) centos2
ubuntu2 | CHANGED | rc=0 | (stdout) ubuntu2
ubuntu3 | CHANGED | rc=0 | (stdout) ubuntu-c


# Argument 'id'
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ansible all -a 'id'
 [WARNING]: Platform linux on host robq-VirtualBox is using the discovered Python interpreter at /usr/bin/python, but future installation of another Python interpreter could change this. See
https://docs.ansible.com/ansible/2.8/reference_appendices/interpreter_discovery.html for more information.

robq-VirtualBox | CHANGED | rc=0 >>
uid=1000(robq) gid=1000(robq) groups=1000(robq),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),112(lpadmin),128(sambashare)

ubuntu1 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)

centos1 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

centos2 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

centos3 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

ubuntu2 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)

ubuntu3 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)


# The 'creates' Module
ansible all -a 'touch /tmp/test_copy_module creates=/tmp/test_copy_module'
centos1 | CHANGED | rc=0 >>

ansible all -a 'touch /tmp/test_copy_module creates=/tmp/test_copy_module'
robq-VirtualBox | SUCCESS | rc=0 >>
skipped, since /tmp/test_copy_module exists


# The 'removes' Module
ansible all -a 'rm /tmp/test_copy_module removes=/tmp/test_copy_module'
robq-VirtualBox | CHANGED | rc=0 >>

ansible all -a 'rm /tmp/test_copy_module removes=/tmp/test_copy_module'
robq-VirtualBox | SUCCESS | rc=0 >>
skipped, since /tmp/test_copy_module does not exist


#Argument state=absent
ansible all -m file -a 'path=/tmp/test_copy_module state=absent'

# Create a file on Centos1 and then copy it locally
ansible centos1 -m file -a 'path=/tmp/test_modules.txt state=touch mode=600'
ansible centos1 -m fetch -a 'src=/tmp/test_modules.txt dest=/tmp/test_modules.txt'
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ls -lart /tmp/test_modules.txt/centos1/tmp/test_modules.txt 
-rw------- 1 robq robq 0 Jul 14 01:33 /tmp/test_modules.txt/centos1/tmp/test_modules.txt

# Using Ansible Doc
ansible-doc find
ansible-doc fetch 
# etc...

## YAML

Resources:
http://yaml-online-parser.appspot.com
http://yaml.org/spec/1.2/spec.html
https://en.wikipedia.org/wiki/YAML
https://stackoverflow.com/questions/3790454/in-yaml-how-do-i-break-a-string-over-multiple-lines


Example #07:

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ cat test.yml 
# Every YAML file should start with three dashes
---

example_key_1: >-
  this is a string
  that goes over
  multiple lines
 
# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ ./show_yaml_python.py 
{'example_key_1': 'this is a string that goes over multiple lines'}



## Further notes created on 03/11/2019
## lists & dictionaries

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/02$ ./show_yaml_python.py 
{'example_key_1': 'this is a string',
 'example_key_2': 'this is another string'}

# Output 'Python' is treating the above as a dictionary given the curly brackets
# The below shows how you can lookup a value by the key...

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/02$ python
Python 2.7.15+ (default, Oct  7 2019, 17:39:04) 
[GCC 7.4.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> myvar = {'example_key_1': 'this is a string', 'example_key_2': 'this is another string'}
>>> print (myvar)
{'example_key_2': 'this is another string', 'example_key_1': 'this is a string'}
>>> print (myvar['example_key_1'])
this is a string
>>> print (myvar['example_key_2'])
this is another string
>>> 

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ cat test.yml 
# Every YAML file should start with three dashes
---

example_key_1: >-
  this is a string
  that goes over
  multiple lines
 
# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ ./show_yaml_python.py 
{'example_key_1': 'this is a string that goes over multiple lines'}

# The > will format over the value over one line
# The >- will strip the /n from the output of the value


## lists

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/11$ cat test.yml 
---
# Every YAML file should start with three dashes

- item 1
- item 2
- item 3
- item 4
- item 5

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/11$ ./show_yaml_python.py 
['item 1', 'item 2', 'item 3', 'item 4', 'item 5']
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/11$ 

# In Python
Python 2.7.15+ (default, Oct  7 2019, 17:39:04) 
[GCC 7.4.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> myvar = ['item 1', 'item 2', 'item 3', 'item 4', 'item 5']
>>> print(myvar)
['item 1', 'item 2', 'item 3', 'item 4', 'item 5']
>>> print(myvar[0])
item 1
>>> print(type(myvar))
<type 'list'>
>>> 

# dictionary of lists
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/17$ cat test.yml 
---
# Every YAML file should start with three dashes

example_key_1:
  - list item 1
  - list item 2

example_key_2:
  - list item 3
  - list item 4

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/17$ ./show_yaml_python.py 
{'example_key_1': ['list item 1', 'list item 2'],
 'example_key_2': ['list item 3', 'list item 4']}

# list of dictionaries
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/18$ cat test.yml 
---
# Every YAML file should start with three dashes

- example_1: 
  - item_1
  - item_2
  - item_3

- example_2: 
  - item_4
  - item_5
  - item_6

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/18$ ./show_yaml_python.py 
[{'example_1': ['item_1', 'item_2', 'item_3']},
 {'example_2': ['item_4', 'item_5', 'item_6']}]

 # dictionary consisting of a list of dictionaries each one consisting of a list of items
 robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/19$ cat test.yml 
---
# Every YAML file should start with three dashes

example_dictionary_1:
  - example_dictionary_2:
    - 1
    - 2
    - 3
  - example_dictionary_2:
    - 4
    - 5
    - 6
  - example_dictionary_4:
    - 7
    - 8
    - 9

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/19$ ./show_yaml_python.py 
{'example_dictionary_1': [{'example_dictionary_2': [1, 2, 3]},
                          {'example_dictionary_2': [4, 5, 6]},
                          {'example_dictionary_4': [7, 8, 9]}]}

Example #22:

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/22$ cat test.yml 
---
# Every YAML file should start with three dashes

- Aston Martin:
    year_founded: 1913
    website: astonmartin.com
    founded_by:
      - Lionel Martin
      - Robert Bamford
- Fiat:
    year_founded: 1899
    website: fiat.com
    founded_by: 
      - Giovanni Agnelli
- Ford:
    year_founded: 1903
    website: ford.com
    founded_by:
      - Henry Ford  
- Vauxhall:
    year_founded: 1857
    website: vauxhall.co.uk
    founded_by:
      - Alexander Wilson 

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/22$ ./show_yaml_python.py 
[{'Aston Martin': {'founded_by': ['Lionel Martin', 'Robert Bamford'],
                   'website': 'astonmartin.com',
                   'year_founded': 1913}},
 {'Fiat': {'founded_by': ['Giovanni Agnelli'],
           'website': 'fiat.com',
           'year_founded': 1899}},
 {'Ford': {'founded_by': ['Henry Ford'],
           'website': 'ford.com',
           'year_founded': 1903}},
 {'Vauxhall': {'founded_by': ['Alexander Wilson'],
               'website': 'vauxhall.co.uk',
               'year_founded': 1857}}]



## Ansible Playbooks, Breakdown on Sections
# Re-watched this section on 04/11/2019 :-)

# Frickme!   ???
robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$ time ansible-playbook motd_playbook.yml -K
BECOME password: 

PLAY [centos] ****************************************************************************************************

TASK [Gathering Facts] *******************************************************************************************
ok: [centos2]
ok: [centos1]
ok: [centos3]

TASK [Configure a MOTD (message of the day)] *********************************************************************
ok: [centos2]
ok: [centos3]
ok: [centos1]

PLAY RECAP *******************************************************************************************************
centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


real	0m8.445s
user	0m3.163s
sys	0m0.915s

# Further ansible-playbook commands

ansible-playbook motd_playbook.yml -K -e 'motd="Testing the motd playbook\n"'

ansible-playbook motd_playbook.yml -K -e 'motd_centos="Testing the motd playbook\n"'

ansible-playbook motd_playbook.yml -K -e 'motd_ubuntu="Testing the motd playbook\n"'

# e.g.

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$ ansible-playbook motd_playbook.yml -K -e 'motd_ubuntu="Testing the motd playbook\n"'
BECOME password: 

PLAY [linux] ********************************************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************************************
ok: [ubuntu1]
ok: [ubuntu2]
ok: [centos3]
ok: [centos2]
ok: [centos1]
ok: [ubuntu3]

TASK [Configure a MOTD (message of the day)] ************************************************************************************************************
skipping: [ubuntu1]
skipping: [ubuntu2]
skipping: [ubuntu3]
changed: [centos2]
changed: [centos1]
changed: [centos3]

TASK [Configure a MOTD (message of the day)] ************************************************************************************************************
skipping: [centos3]
skipping: [centos2]
skipping: [centos1]
changed: [ubuntu1]
changed: [ubuntu2]
changed: [ubuntu3]

RUNNING HANDLER [MOTD changed] **************************************************************************************************************************
ok: [centos2] => {
    "msg": "The MOTD was changed"
}
ok: [centos1] => {
    "msg": "The MOTD was changed"
}
ok: [centos3] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu1] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu2] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu3] => {
    "msg": "The MOTD was changed"
}

PLAY RECAP **************************************************************************************************************************************************************************************
centos1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
centos2                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
centos3                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu2                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu3                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$



## Ansible Playbooks, Variables
# Re-watched this section and made some files changes on 04/11/2019

# New files added i.e. variables_playbook#.yml
ansible-playbook variables_playbook#.yml

# Used for Example playbook16
ansible-playbook variables_playbook16.yml -e 'extra_vars_key="extra vars value"'
ok: [centos1] => {
    "msg": "extra vars value"

# & json format
ansible-playbook variables_playbook16.yml -e '{"extra_vars_key": "extra vars value in json"}'
ok: [centos1] => {
    "msg": "extra vars value in json"

# yaml format - USE THIS ONE!!!
ansible-playbook variables_playbook16.yml -e '{extra_vars_key: extra vars value in yaml}'
ok: [centos1] => {
    "msg": "extra vars value in yaml"


# playbook17
ansible-playbook variables_playbook17.yml -e @extra_vars_file.yml
ok: [centos1] => {
    "msg": "extra vars value"
}

ansible-playbook variables_playbook17.yml -e @extra_vars_file.json
ok: [centos1] => {
    "msg": "extra vars value"
}



# Ansible Playbooks, Facts
# Re-watched this section on 04/11/2019

- Facts
- The setup module and how this relates to fact gathering
- Filtering for specific facts
- The creation of custom facts
- The execution of custom facts
- How custom facts can be used in environments without super user access

# facts_playbook1.yml
ansible centos1 -m setup -a'gather_subset=network'
# Word Count using '| wc -l'
ansible centos1 -m setup -a'gather_subset=network' | wc -l

ansible centos1 -m setup -a'gather_subset=network,!all,!min' | wc -l

ansible centos1 -m setup -a 'filter=ansible_memfree_mb'
centos1 | SUCCESS => {
    "ansible_facts": {
        "ansible_memfree_mb": 136, 
        "discovered_interpreter_python": "/usr/bin/python"
    }, 
    "changed": false
}

# Using the wildcard *
ansible centos1 -m setup -a'filter=ansible_mem*'


# getdate1 & getdate2
# both these files are within the /templates directory
# 1. Json format
$ ./getdate1.fact   
{"date" : "Sun  4 Aug 21:41:01 BST 2019"}
# 2. Ini format
$ ./getdate2.fact 
[date]
date=Sun 4 Aug 21:41:05 BST 2019


sudo mkdir /etc/ansible/facts.d
sudo cp * /etc/ansible/facts.d/
ls -larth /etc/ansible/facts.d/
/etc/ansible/facts.d/getdate1.fact 
/etc/ansible/facts.d/getdate2.fact

ansible robq-VirtualBox -m setup | tee /tmp/x

# Output in /etc/x using vim
ansible_local": {
            "getdate1": {
                "date": "Sun  4 Aug 21:36:54 BST 2019"
            },
            "getdate2": {
                "date": {
                    "date": "Sun 4 Aug 21:36:54 BST 2019"
                }
            }
        },


# Use this for a better Output
$ ansible robq-VirtualBox -m setup -a 'filter=ansible_local'

robq-VirtualBox | SUCCESS => {
    "ansible_facts": {
        "ansible_local": {
            "getdate1": {
                "date": "Sun  4 Aug 21:44:15 BST 2019"
            }, 
            "getdate2": {
                "date": {
                    "date": "Sun 4 Aug 21:44:15 BST 2019"
                }
            }
        }, 
        "discovered_interpreter_python": "/usr/bin/python"
    }, 
    "changed": false
}

# Running the facts_playbook3 & 4 just on robq-VirtualBox (The Ansible Controller)
ansible-playbook facts_playbook3.yml -l robq-VirtualBox

PLAY [all] ************************************************************

TASK [Gathering Facts] ************************************************
ok: [robq-VirtualBox]

TASK [Show IP Address] ************************************************
ok: [robq-VirtualBox] => {
    "msg": "192.168.0.48"
}

TASK [Show Custom Fact 1] *********************************************
ok: [robq-VirtualBox] => {
    "msg": "Sun  4 Aug 22:17:01 BST 2019"
}

TASK [Show Custom Fact 2] *********************************************
ok: [robq-VirtualBox] => {
    "msg": "Sun 4 Aug 22:17:01 BST 2019"
}

PLAY RECAP ************************************************************
robq-VirtualBox                       : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

ansible-playbook facts_playbook4.yml -l robq-VirtualBox

# Copying the getdates.facts to the Linux Group
ansible-playbook facts_playbook5.yml

# Remove getdate#.fact from all the hosts :
ansible all -m file -a 'path=/etc/ansible/facts.d/getdate1.fact state=absent' -o
ansible all -m file -a 'path=/etc/ansible/facts.d/getdate2.fact state=absent' -o

sudo rm -rf /etc/ansible-facts.d/*

# Run the last playbook to copy the getdate scripts using /home/packt user
ansible-playbook facts_playbook6.yml

# Again cleanup the scripts from all linux hosts
$ ansible linux -m file -a 'path=/home/packt/ansible/facts.d state=absent'



## Templating with Jinja2
- The Jinja2 templating language
- if/elif/else statements
- for loops
- break and continue
- ranges
- Jinja2 filters

# Jinja2_Playbook3
$ ansible-playbook jinja2_playbook3.yml 

PLAY [all] ********************************************************************************************************

TASK [Gathering Facts] ********************************************************************************************
ok: [ubuntu1]
ok: [robq-VirtualBox]
ok: [ubuntu2]
ok: [ubuntu3]
ok: [centos3]
ok: [centos1]
ok: [centos2]

TASK [Ansible Jinja2 if elif else] ********************************************************************************
ok: [robq-VirtualBox] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is robq-VirtualBox\n"
}
ok: [centos3] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is good old centos3\n"
}
ok: [centos2] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is good old centos2\n"
}
ok: [centos1] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is centos1 with it's modified SSH Port\n"
}
ok: [ubuntu1] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is good old ubuntu1\n"
}
ok: [ubuntu2] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is good old ubuntu2\n"
}
ok: [ubuntu3] => {
    "msg": "--== Ansible Jinja2 if elif else statement ==--\nThis is good old ubuntu3\n"
}

PLAY RECAP ********************************************************************************************************
centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
robq-VirtualBox            : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
ubuntu1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
ubuntu2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
ubuntu3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

$ ansible-playbook jinja2_playbook11.yml 
$ cat /tmp/robq-VirtualBox_template.out 
--== Ansible Jinja2 if statement ==--

This is robq-VirtualBox

--== Ansible Jinja2 if elif statement ==--

This is robq-VirtualBox

--== Ansible Jinja2 if elif else statement ==--

This is robq-VirtualBox

--== Ansible Jinja2 if variable is defined ( where variable is not defined ) ==--

example_variable is not defined

--== Ansible Jinja2 if varible is defined ( where variable is defined ) ==--

example_variable is defined

--== Ansible Jinja2 for statement ==--

IP Address entry 1 = 10.0.4.15
IP Address entry 2 = 192.168.1.41
IP Address entry 3 = 192.168.0.48

--== Ansible Jinja2 for range

1
2
3
4
5
6
7
8
9
10

--== Ansible Jinja2 for range, reversed (simulate while greater 5) ==--

10
9
8
7
6

--== Ansible Jinja2 for range, reversed (continue if odd) ==--

10
8
6
4
2

---=== Ansible Jinja2 filters ===---

--== min [1, 2, 3, 4, 5] ==--

1

--== max [1, 2, 3, 4, 5] ==--

5

--== unique [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] ==--

[1, 2, 3, 4, 5]

--== difference [1, 2, 3, 4, 5] vs [2, 3, 4, 5, 6] ==--

[1, 5]

--== random ['rod', 'jane', 'freddy'] ==--

freddy

--== urlsplit hostname ==--

docs.ansible.com

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-07-01$ ssh packt@192.168.0.42
packt@ubuntu1:~$ cat /tmp/ubuntu1_template.out
--== Ansible Jinja2 if statement ==--


--== Ansible Jinja2 if elif statement ==--


--== Ansible Jinja2 if elif else statement ==--

This is good old ubuntu1

--== Ansible Jinja2 if variable is defined ( where variable is not defined ) ==--

example_variable is not defined

--== Ansible Jinja2 if varible is defined ( where variable is defined ) ==--

example_variable is defined

--== Ansible Jinja2 for statement ==--

IP Address entry 1 = 192.168.1.16
IP Address entry 2 = 192.168.0.42


## Ansible Playbooks, Creating and Executing

- A use case example of using Ansible Playbooks
- Installing Nginx Web Server on CentOS & Ubuntu
- Using Ansible o standardize the configuration across both platforms
- Using Ansible to fix any issues that arise owing to differences in the different operating systems
- Templating a website
- Using Ansible facts to customize our template page


# nginx_playbook3.yml output

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-08-01$ ansible-playbook nginx_playbook3.yml 

PLAY [centos] ********************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************
ok: [centos2]
ok: [centos1]
ok: [centos3]

TASK [Install EPEL] **************************************************************************************************
ok: [centos2]
ok: [centos1]
ok: [centos3]

TASK [Install Nginx] *************************************************************************************************
ok: [centos3]
ok: [centos2]
ok: [centos1]

TASK [Install Patch] *************************************************************************************************
ok: [centos3]
ok: [centos2]
ok: [centos1]

TASK [Patch nginx.conf to include sites-available, disable default server entry] *************************************
ok: [centos2]
changed: [centos3]
changed: [centos1]

PLAY RECAP ***********************************************************************************************************
centos1                    : ok=5    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos2                    : ok=5    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos3                    : ok=5    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

# nginx_playbook10.yml output

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-08-01$ ansible-playbook nginx_playbook10.yml

PLAY [centos3] *******************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************
ok: [centos3]

TASK [Install EPEL] **************************************************************************************************
ok: [centos3]

TASK [Install Nginx] *************************************************************************************************
ok: [centos3]

TASK [Install Patch] *************************************************************************************************
ok: [centos3]

TASK [Patch nginx.conf to include sites-available, disable default server entry] *************************************
ok: [centos3]

TASK [Create /etc/nginx/sites-available directory if required] *******************************************************
ok: [centos3]

TASK [Create /etc/nginx/sites-enabled directory if required] *********************************************************
ok: [centos3]

TASK [Copy default nginx configuration] ******************************************************************************
ok: [centos3]

TASK [Symbolic link /etc/nginx/sites-available/default to /etc/nginx/sites-enabled/default] **************************
ok: [centos3]

TASK [Create nginx/html directory if required] ***********************************************************************
ok: [centos3]

TASK [Template index.html.j2 to index.html on target] ****************************************************************
changed: [centos3]

TASK [Restart nginx] *************************************************************************************************
changed: [centos3]

TASK [Open CentOS firewall for Nginx] ********************************************************************************
ok: [centos3]

RUNNING HANDLER [Check HTTP Service] *********************************************************************************
ok: [centos3]

PLAY RECAP ***********************************************************************************************************
centos3                    : ok=14   changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 


## Section 3 - Ansible Playbooks, Advanced Topics

- Ansible Playbook modules
- Dynamic inventories
- register and when
- Looping
- Asynchronous and Parellel
- Task delegation
- Magic variables
- Blocks
- Using the Ansible Vault
- Creating custom modules
- Creating plugins

# Ansible playbook modules

- Ansible playbook modules
- set_fact
- pause
- prompt
- wait_for
- assemble
- add_host
- group_by
- fetch

* Ansible playbook modules
# Prior to running wait_for_playbook.yml
# Stop the nginx service on the centos2 vm

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/03-01-01$ ansible centos2 -m service -a 'name=nginx state=stopped'
centos2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    }, 
    "changed": false, 
    "name": "nginx", 
    "state": "stopped", 
    "status": {
        "ActiveEnterTimestampMonotonic": "0", 
        "ActiveExitTimestampMonotonic": "0", 
        "ActiveState": "inactive", 

# run the playbook

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/03-01-01$ ansible-playbook wait_for_playbook.yml &

PLAY [centos3] ******************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************
ok: [centos3]

TASK [Wait for the webserver to be running on port 80] **************************************************************************

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/03-01-01$ ansible centos2 -m service -a 'name=nginx state=started'
centos2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    }, 
    "changed": false, 
    "name": "nginx", 
    "state": "started", 
    "status": {
        "ActiveEnterTimestamp": "Sun 2019-11-17 21:35:29 GMT", 
        "ActiveEnterTimestampMonotonic": "25343698897", 
        "ActiveExitTimestampMonotonic": "0", 
        "ActiveState": "active",
        .
        .
        .
        .
        .
        .
        "Type": "forking", 
        "UMask": "0022", 
        "UnitFilePreset": "disabled", 
        "UnitFileState": "disabled", 
        "Wants": "system.slice", 
        "WatchdogTimestampMonotonic": "0", 
        "WatchdogUSec": "0"
    }
}
robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/03-01-01$ ok: [centos3]

PLAY RECAP **********************************************************************************************************************
centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


[1]+  Done                    ansible-playbook wait_for_playbook.yml
