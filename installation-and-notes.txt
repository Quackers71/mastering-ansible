## Mastering Ansible
# Servers & IP's 
              IP:
1. dnsmasq  - 192.168.0.40
2. ubuntu-c - 192.168.0.41
3. ubuntu1  - 192.168.0.42
4. ubuntu2  - 192.168.0.43  
5. centos1  - 192.168.0.45
6. centos2  - 192.168.0.46
7. centos3  - 192.168.0.47
8. Mint     - 192.168.0.48

# Install ansible on Linux Mint
sudo apt-add-repository ppa:ansible/ansible
sudo apt update
sudo apt install ansible
# other installations can be viewed at : 
https://github.com/Quackers71/ps-h-o-ansible/blob/master/Installation.txt

# Add the .pub key to all the hosts
robq@robq-VirtualBox:~/mastering-ansible/ansible$ for host in /
192.168.0.41 192.168.0.42 192.168.0.43 192.168.0.46 192.168.0.47; do ssh-copy-id ${host}; done

# ansible host commands
ansible all -m ping
ansible centos --list-hosts
ansible ubuntu --list-hosts
ansible all --list-hosts
ansible ~.*3 --list-hosts

# Changing centos1 port to 2222
ssh root@192.168.0.45
vim /etc/ssh/sshd_config
# change to 
Port 2222
# now run
-bash-4.2# semanage port -a -t ssh_port_t -p tcp 2222
-bash: semanage: command not found
-bash-4.2# yum install policycoreutils-python -y

-bash-4.2# semanage port -a -t ssh_port_t -p tcp 2222
ValueError: Port tcp/2222 already defined

-bash-4.2# firewall-cmd --permanent --add-port=2222/tcp
success
-bash-4.2# firewall-cmd --reload
success

-bash-4.2# service sshd restart
Redirecting to /bin/systemctl restart sshd.service

-bash-4.2# ssh 0 -p 2222
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[0]:2222,[0.0.0.0]:2222' (ECDSA) to the list of known hosts.
root@0's password: 
Last login: Sun Jul 14 21:17:31 2019

## Ansible Inventories

https://docs.ansible.com/ansible/2.3/intro_inventory.html

https://docs.ansible.com/ansible/latest/user_guide/vault.html


## Ansible Modules

date
# The 'file' Module
ansible all -m file -a 'path=/tmp/test state=touch'
# Yellow Output = Success but shows 'CHANGED'
ls -altrh /tmp/test
ansible all -m file -a 'path=/tmp/test state=touch'
# Yellow Output
ls -altrh /tmp/test
ansible all -m file -a 'path=/tmp/test state=file mode=600'
# Yellow Output
ansible all -m file -a 'path=/tmp/test state=file mode=600'
# Green Output = Success (no change)


# Idempotency - An operation is Idempotent
# if the result of performing it once is 
# exactly the same as the result of performing
# it repeatedly without any intervening actions.


# The 'copy' Module
touch /tmp/x
ansible all -m copy -a 'src=/tmp/x dest=/tmp/x'
ansible all -m copy -a 'remote_src=yes src=/tmp/x dest=/tmp/y'


# The 'command' Module
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ansible all -m command -a 'hostname' -o
mint | CHANGED | rc=0 | (stdout) robq-VirtualBox
ubuntu1 | CHANGED | rc=0 | (stdout) ubuntu1
centos1 | CHANGED | rc=0 | (stdout) centos1
centos3 | CHANGED | rc=0 | (stdout) centos3
centos2 | CHANGED | rc=0 | (stdout) centos2
ubuntu2 | CHANGED | rc=0 | (stdout) ubuntu2
ubuntu3 | CHANGED | rc=0 | (stdout) ubuntu-c


# Argument 'id'
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ansible all -a 'id'
 [WARNING]: Platform linux on host mint is using the discovered Python interpreter at /usr/bin/python, but future installation of another Python interpreter could change this. See
https://docs.ansible.com/ansible/2.8/reference_appendices/interpreter_discovery.html for more information.

mint | CHANGED | rc=0 >>
uid=1000(robq) gid=1000(robq) groups=1000(robq),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),112(lpadmin),128(sambashare)

ubuntu1 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)

centos1 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

centos2 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

centos3 | CHANGED | rc=0 >>
uid=1000(packt) gid=1000(packt) groups=1000(packt),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

ubuntu2 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)

ubuntu3 | CHANGED | rc=0 >>
uid=0(root) gid=0(root) groups=0(root)


# The 'creates' Module
ansible all -a 'touch /tmp/test_copy_module creates=/tmp/test_copy_module'
centos1 | CHANGED | rc=0 >>

ansible all -a 'touch /tmp/test_copy_module creates=/tmp/test_copy_module'
mint | SUCCESS | rc=0 >>
skipped, since /tmp/test_copy_module exists


# The 'removes' Module
ansible all -a 'rm /tmp/test_copy_module removes=/tmp/test_copy_module'
mint | CHANGED | rc=0 >>

ansible all -a 'rm /tmp/test_copy_module removes=/tmp/test_copy_module'
mint | SUCCESS | rc=0 >>
skipped, since /tmp/test_copy_module does not exist


#Argument state=absent
ansible all -m file -a 'path=/tmp/test_copy_module state=absent'


# Create a file on Centos1 and then copy it locally
ansible centos1 -m file -a 'path=/tmp/test_modules.txt state=touch mode=600'
ansible centos1 -m fetch -a 'src=/tmp/test_modules.txt dest=/tmp/test_modules.txt'
robq@robq-VirtualBox:~/mastering-ansible/ansible$ ls -lart /tmp/test_modules.txt/centos1/tmp/test_modules.txt 
-rw------- 1 robq robq 0 Jul 14 01:33 /tmp/test_modules.txt/centos1/tmp/test_modules.txt

## YAML

Resources:
http://yaml-online-parser.appspot.com
http://yaml.org/spec/1.2/spec.html
https://en.wikipedia.org/wiki/YAML
https://stackoverflow.com/questions/3790454/in-yaml-how-do-i-break-a-string-over-multiple-lines


Example #07:

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ cat test.yml 
# Every YAML file should start with three dashes
---

example_key_1: >-
  this is a string
  that goes over
  multiple lines
 
# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/07$ ./show_yaml_python.py 
{'example_key_1': 'this is a string that goes over multiple lines'}


Example #22:

robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/22$ cat test.yml 
---
# Every YAML file should start with three dashes

- Aston Martin:
    year_founded: 1913
    website: astonmartin.com
    founded_by:
      - Lionel Martin
      - Robert Bamford
- Fiat:
    year_founded: 1899
    website: fiat.com
    founded_by: 
      - Giovanni Agnelli
- Ford:
    year_founded: 1903
    website: ford.com
    founded_by:
      - Henry Ford  
- Vauxhall:
    year_founded: 1857
    website: vauxhall.co.uk
    founded_by:
      - Alexander Wilson 

# Every YAML file should end with three dots
...
robq@robq-VirtualBox:~/Mastering-Ansible/02 - Ansible Architecture and Design/03 - YAML/22$ ./show_yaml_python.py 
[{'Aston Martin': {'founded_by': ['Lionel Martin', 'Robert Bamford'],
                   'website': 'astonmartin.com',
                   'year_founded': 1913}},
 {'Fiat': {'founded_by': ['Giovanni Agnelli'],
           'website': 'fiat.com',
           'year_founded': 1899}},
 {'Ford': {'founded_by': ['Henry Ford'],
           'website': 'ford.com',
           'year_founded': 1903}},
 {'Vauxhall': {'founded_by': ['Alexander Wilson'],
               'website': 'vauxhall.co.uk',
               'year_founded': 1857}}]


## Ansible Playbooks, Breakdown on Sections

# Frickme!
robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$ time ansible-playbook motd_playbook.yml -K
BECOME password: 

PLAY [centos] ****************************************************************************************************

TASK [Gathering Facts] *******************************************************************************************
ok: [centos2]
ok: [centos1]
ok: [centos3]

TASK [Configure a MOTD (message of the day)] *********************************************************************
ok: [centos2]
ok: [centos3]
ok: [centos1]

PLAY RECAP *******************************************************************************************************
centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


real	0m8.445s
user	0m3.163s
sys	0m0.915s

# Further ansible-playbook commands

ansible-playbook motd_playbook.yml -K -e 'motd="Testing the motd playbook\n"'

ansible-playbook motd_playbook.yml -K -e 'motd_centos="Testing the motd playbook\n"'

ansible-playbook motd_playbook.yml -K -e 'motd_ubuntu="Testing the motd playbook\n"'

# e.g.

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$ ansible-playbook motd_playbook.yml -K -e 'motd_ubuntu="Testing the motd playbook\n"'
BECOME password: 

PLAY [linux] ********************************************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************************************
ok: [ubuntu1]
ok: [ubuntu2]
ok: [centos3]
ok: [centos2]
ok: [centos1]
ok: [ubuntu3]

TASK [Configure a MOTD (message of the day)] ************************************************************************************************************
skipping: [ubuntu1]
skipping: [ubuntu2]
skipping: [ubuntu3]
changed: [centos2]
changed: [centos1]
changed: [centos3]

TASK [Configure a MOTD (message of the day)] ************************************************************************************************************
skipping: [centos3]
skipping: [centos2]
skipping: [centos1]
changed: [ubuntu1]
changed: [ubuntu2]
changed: [ubuntu3]

RUNNING HANDLER [MOTD changed] **************************************************************************************************************************
ok: [centos2] => {
    "msg": "The MOTD was changed"
}
ok: [centos1] => {
    "msg": "The MOTD was changed"
}
ok: [centos3] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu1] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu2] => {
    "msg": "The MOTD was changed"
}
ok: [ubuntu3] => {
    "msg": "The MOTD was changed"
}

PLAY RECAP **************************************************************************************************************************************************************************************
centos1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
centos2                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
centos3                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu2                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ubuntu3                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   

robq@robq-VirtualBox:~/mastering-ansible/ansible/playbooks/02-04-02$

## Ansible Playbooks, Variables

# New files added i.e. variables_playbook#.yml
ansible-playbook variables_playbook#.yml

# Used for Example playbook16
ansible-playbook variables_playbook16.yml -e 'extra_vars_key="extra vars value"'
ok: [centos1] => {
    "msg": "extra vars value"

# & json format
ansible-playbook variables_playbook16.yml -e '{"extra_vars_key": "extra vars value in json"}'
ok: [centos1] => {
    "msg": "extra vars value in json"

# yaml format
ansible-playbook variables_playbook16.yml -e '{extra_vars_key: extra vars value in yaml}'
ok: [centos1] => {
    "msg": "extra vars value in yaml"

# playbook17
ansible-playbook variables_playbook17.yml -e @extra_vars_file.yml
ok: [centos1] => {
    "msg": "extra vars value"
}

ansible-playbook variables_playbook17.yml -e @extra_vars_file.json
ok: [centos1] => {
    "msg": "extra vars value"
}

# Ansible Playbooks, Facts

- Facts
- The setup module and how this relates to fact gathering
- Filtering for specific facts
- The creation of custom facts
- The execution of custom facts
- How custom facts can be used in environments without super user access

# facts_playbook1.yml
ansible centos1 -m setup -a'gather_subset=network'
ansible centos1 -m setup -a'gather_subset=network' | wc -l

ansible centos1 -m setup -a'gather_subset=network,!all,!min' | wc -l

ansible centos1 -m setup -a'filter=ansible_memfree_mb'
centos1 | SUCCESS => {
    "ansible_facts": {
        "ansible_memfree_mb": 136, 
        "discovered_interpreter_python": "/usr/bin/python"
    }, 
    "changed": false
}

ansible centos1 -m setup -a'filter=ansible_mem*'

